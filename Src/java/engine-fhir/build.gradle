plugins {
    id 'cql.library-conventions'
    id 'cql.xjc-conventions'
    id 'cql.fhir-conventions'
}

dependencies {
    api project(':engine')
    testImplementation 'com.github.tomakehurst:wiremock-jre8:2.35.2'
    testImplementation project(':cql-to-elm')
    testImplementation project(':model-jackson')
    testImplementation project(':elm-jackson')
    testImplementation project(':quick')
    testImplementation 'ca.uhn.hapi.fhir:hapi-fhir-client'
}

generateSources {
    inputs.dir "${projectDir}/src/test/resources/org/hl7/fhirpath/testSchema"

    doLast {
        ant.xjc(destdir: xjc.destDir, schema: "${projectDir}/src/test/resources/org/hl7/fhirpath/testSchema/testSchema.xsd") {
            arg(line: "${xjc.args} -npa " +
                "-p org.hl7.fhirpath.tests")
        }
    }
}

jacocoTestReport {
    sourceDirectories.setFrom(files(
            "${projectDir}/../cql-to-elm/src/main/java",
            "${projectDir}/../engine/src/main/java",
            "${projectDir}/../engine-fhir/src/main/java",
            "${projectDir}/../../cql-to-elm/src/main/java",
            "${projectDir}/../../engine/src/main/java",
            "${projectDir}/../../engine-fhir/src/main/java",
    ))

    // Specify additional class directories or JAR files
    classDirectories.setFrom(files(
            "${projectDir}/../cql-to-elm/build/classes",
            "${projectDir}/../engine/build/classes",
            "${projectDir}/../engine-fhir/build/classes",
            "${projectDir}/../../cql-to-elm/build/classes",
            "${projectDir}/../../engine/build/classes",
            "${projectDir}/../../engine-fhir/build/classes",
    ))
}